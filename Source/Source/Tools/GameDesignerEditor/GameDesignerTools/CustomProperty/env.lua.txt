	envname = "原始环境"
    function t()
        print(envname)
    end

	local ____main_env_varTable = {}   -- package

	local function _MakeEnv(envname)
	    --setfenv(1, _G)
		____main_env_varTable[envname] = {}
		_G["__fname__"..envname] = ____main_env_varTable[envname]
		____main_env_varTable[envname].envname = envname
    	setmetatable(____main_env_varTable[envname], {__index = _G})
    end
	function _ChgEnv(envname)
		if (envname == nil) then
	        setfenv(2, _G)
		elseif (____main_env_varTable[envname] == nil) then
      		_MakeEnv(envname)
      		setfenv(2, ____main_env_varTable[envname])
	    else
	    	setfenv(2, ____main_env_varTable[envname])
		end
    end

  	--_MakeEnv("环境1")
  	--_MakeEnv("环境2")
  	--_MakeEnv("环境3")

	print("开始")
	t()
	_ChgEnv("env1")
	function t()
	    print("env1")
	end
	t()
	_ChgEnv("环境2")
	t()
	_ChgEnv("环境2")
	t()
	_ChgEnv("环境2")
	function t()
	    print("环境2")
	end
	t()
	_ChgEnv("env1")
	t()
	_ChgEnv("环境2")

__fname__env1.t()

-----------------------------------------------------------------------------------------------------------------------------
--treeenv
----------
local ____main_env_varTable = {}   -- package
local function _MakeEnv(envname, parentenv)
    --setfenv(1, _G)
	____main_env_varTable[envname] = {}
	_G['__fname__'..envname] = ____main_env_varTable[envname]
	____main_env_varTable[envname].envname = envname
	
	if (parentenv and ____main_env_varTable[parentenv] == nil) then
		_MakeEnv(parentenv, nil)
	end

	if (parentenv and ____main_env_varTable[parentenv]) then
		____main_env_varTable[envname].parent = ____main_env_varTable[parentenv]
	else
    	____main_env_varTable[envname].parent = _G
	end

	if (parentenv == nil) then
		setmetatable(____main_env_varTable[envname], {__index = _G})
	else
	    setmetatable(____main_env_varTable[envname], {__index = ____main_env_varTable[parentenv]})  --设置父环境
	end
end

function _ChgEnv(envname, parentenv)
	if (envname == nil) then
        setfenv(2, _G)
	elseif (____main_env_varTable[envname] == nil) then
  		_MakeEnv(envname, parentenv)
	end
  	setfenv(2, ____main_env_varTable[envname])
  	if (parentenv == nil) then
  	    _parentenv = _G
	else
		_parentenv = ____main_env_varTable[parentenv] --设置父环境
	end
end

	function t()
	    print('env1')
	end
	t()
	_ChgEnv('env2')
	function t()
	    print('env2')
	end
	t()
	_ChgEnv('env3', 'env2')
	function t()
	    print('env3')
	end
	t()
	_ChgEnv('global_123', 'env3') --# 必须使用 g_fname_modtabid 这样的名字
	t()
	_parentenv.parent.t()
	_G.t()
	----------------------------------------------------------
	运行结果
	env1
	env2
	env3
	env3
	env2
	env1
	


-----------------------------------------------------------------------------------------------------------------------------
--预备知识:
本工具的脚本语言为LUA5.1

每个表项可以定义只与其相关的脚本
每个TAB可以定义与各TAB相关的TAB页脚本

各表项之间可以定义完全同名的函数与变量,它们之间不会相互影响

全局变量与函数应该定义在TAB页中,否则不能被表项中的脚本引用到
各属性相关的事件,可以定义在tab页中,当表项中没有定义相关的事件时,会自动调用TAB页中的相关事件.如:TAB页中定义了 onbeforevaluechang事件,则本页中所有没有定义这个事件表项的修改会全部调用TAB中的这个事件

-----------------------------------------------------------------------------------------------------------------------------
--自定义COM组件编辑器例子
luanet.load_assembly("Prj2.dll")
cls = luanet.import_type("Prj2.tcls1") --coclass名字

-----------------------------------------------------------------------------------------------------------------------------
--修改事件
********************************************
--作用：值被修改前的通知事件
--时机：在用户输入或者被脚本修改过某属性的值前，此事件被触发
--参数：
	prop, 被操作的表项指针，可以访问并修改表项的所有属性，以及调用方法
	e, 修改事件参数，有两个属性可使用 oldvalue(代表被修改前的值), newvalue(代表被修改后的值)
--返回值：返回 true, 表示这个修改过后的值可以被接受，返回false，表示e.oldvalue不被接受，系统会显示false后紧跟的参数，见下面的例子
********************************************
例：
function onbeforevaluechang(prop, e)
    if (e.newvalue > 100 and e.oldvalue <= e.newvalue) then
		return true
	elseif e.oldvalue > e.newvalue then
		return false, string.format("新输入的值(%d)必须大于旧值(%d)", e.newvalue, e.oldvalue)
	else
		return false, "值必须 > 100"
end

********************************************
--作用：值被修改成功后的通知事件
--时机：在用户输入或者被脚本修改过某属性的值成功完成后，此事件被触发
--参数：
	prop, 同onbeforevaluechang事件
	e, 只有一个属性 value, 代表被修改后的值
********************************************
例：
function onaftervaluechanged(prop, e)
	Pages[0].Properties["representid1.aa.Model"].Value = 1 --同时修改另一个属性内容
	Form:ReloadProperties() --需要作刷新才能看到其他属性的修改
end

********************************************
--作用:自定义编辑器的脚本入口
--时机:当属性编辑类型被设置为 '自定义编辑' 时，用户点击了右侧的小按钮时,就会触发本事件
--参数:
	prop, 同上
	e, 有两个属性, id(字段英文名), value(字段内容)
--返回值
	当返回true时,第二个返回值代表新的表项值
	当返回false时,表项内容不会有任何变化
********************************************
例:	
function oneditvalue(prop, e)
	o = cls()	
    return true, o:show()
end


--------------------------------------------------------------------------------
--一些其他的例子:

--用非树结点的值,来改变某个树结点值
function onaftervaluechanged(prop, e)
    --trace("aaa ain env after")
    --prop.Value = 55
    --Pages[0].Properties["representid1"].Value = 1
    --Pages[0].Properties["representid1"].GetDynamicClass({1})
    --Form:ReloadProperties()
    Pages[0].Properties["representid1"]:SetValue(e.value)
end

--修改主从表中的子属性,
1. Pages[0].Properties["representid1.aa.Model"].Value = "xxxx"
2. Pages[0].Properties["representid1"]["aa.Model"].Value = "yyyy"
3. Pages[0].Properties["representid1"]["aa"]["Model"].Value = "zzzz"
4. Pages[0].Properties["representid1"]["aa"]["Model"][0].Value = "zzzz" --一对多情况时使用这种
见下例:
function onaftervaluechanged(prop, e)
    --trace("aaa ain env after")
    --prop.Value = 55
    --Pages[0].Properties["representid1"].Value = 1
    --Pages[0].Properties["representid1"].GetDynamicClass({1})
    --Form.ReloadProperties()
    Pages[0].Properties["representid1"]:SetValue(e.value)
    o = Pages[0].Properties["representid1"]["aa.Model"]
    o.Value = "abcd"
    o = Pages[0].Properties["representid1"]["aa"]["Model"]
    o.Value = "dddd"
    o = Pages[0].Properties["representid1.aa.Model"]
    o.Value = "dadfasdfasdf"
    --从表多条子记录索引读取
    o = Pages[0].Properties["representid1.bbbdda.animationfile"]
    if (o.Count > 1) then
    	o[1].Value = "aaa.ani"
    end     
end


-------------------------------------------------------------------------
--LUA调用预览相关
--事件列表
	--切换到不同字段后
	--prop 新切换到的属性对像(CustomProperty)
	onselectpropertychanged(prop)
	
	--切换到不同记录后
	--record 新切换到的记录对象,(DBCustomClass)
	--参数:
		properties可以用来访问本TAB中的所有属性,访问方式见'修改主从表中子属性'的例子
		selecttabindex 当前选中的TAB页索引号, 从1开始
	onselectrecordchanged(properties, selecttabindex)
	
	--切换TAB
	--record 新切换到的记录对象,(DBCustomClass)
	onselecttabchanged(properties)

--可调用函数
InitPreview() --初始化并显示预览窗口, 如果已经初始化过,会把窗口强行显示出来
EngineDir -- atlax.dll 文件所在的路径,通常这个文件要放在 kg3dengine.dll 同一目录下,否则可能不能正常启动 3DEngine

Engine.xxx --atlax.dll COM对象实例,用于调用3DEngine的接口,可用的接口见atlax的工程
	
--例子
--在#区域中,设置以下代码
function onselectrecordchanged(properties, selecttabindex)	
	InitPreview()	
end
--在模型文件浏览框中,设置以下代码
function onaftervaluechanged(prop, e)
	local face = prop.Prefix..prop.Value --prop.Prefix 表示这个属性的绝对路径前缀
	trace(face)
	Engine:LoadFace(face)	
end
--在属性中写
function onaftervaluechanged(prop)
	local face = prop.Prefix..prop.Value
	trace(face)
	Engine:LoadFace(face)	
end

-------------------------------------------------------------------------
-- prop.Field 用于读取下拉框表元中设置的附加字段，这些字段不会被显示出来，但可以被脚本读取到
function onselectrecordchanged(ps, selecttabindex)
	trace(ps["castskillanimationid0"].Field["SFXFilePath"])
end

-------------------------------------------------------------------------
--关于新建子表记录的例子
--每个可展开树结点，可以使用以下事件
--prop, 用户点击操作的树结点
--svalue,用户点击的字段内容值
--最终将会在ID名为id参数的虚拟字段相关的子表中新建记录
--kv，子表的数据库主键的默认值列表，使用 kv['xxxx']形式读取某字段内容，使用kv:SetValue(keyname, value)修改子表主键内容
function onnewrecord(prop, svalue, kv, id)
	trace(prop.Name)
	trace(id)
	trace(kv["AnimationID"])
	trace(kv["RepresentID"])
	--kv["AnimationID"] = 50
	--kv:SetValue("AnimationID", 1150)
	return true
end

-----------------
--新建.NET的插件
function oneditvalue(prop, e)
	luanet.load_assembly("NpcModelNevigate.dll")
	local cls = luanet.import_type("NpcModelNevigate.NpcModelNev")
	local o = cls()
	return true, o:Show()
end

--图标预览插件的例子
function oneditvalue(prop, e)
	luanet.load_assembly("IconBrowser.dll")
	local cls = luanet.import_type("IconBrowser.Implement") -- 主实现类名
	local o = cls()
	o.FileName = 'E:\\work\\Sword3\\sword3DesignBase\\commit_swap\\Ui\\Image\\TargetPanel\\Target.UITex'; --设置当前选择的文件全路径
	o.Rect = Rectangle(1, 1, 200, 200) --设置当前选择的区域
    local retfilename = o:Show()
    if retfilename ~= nil and string.len(retfilename) > 0 then
    	trace(retfilename)
    	trace(o.ID)
    	trace(o.Rect:ToString())
    	return true, retfilename
    else
    	return false
    end
end

--简单多行文本编辑器插件例子
--MultiLineTextEditor.dll
function oneditvalue(prop, e)
	luanet.load_assembly("MultiLineTextEditor.dll")
	local cls = luanet.import_type("MultiLineTextEditor.Impl")
	local o = cls()
	local r = o:Show(prop.Value)
	if r == nil then
		return false
	else
		return true, r
	end	
end


--把模块树插件化的例子
--LUA 脚本中有 LoadTreePlugin(), 将被认为是用插件生成树.
--具体参照 BaseForm::LoadTree() 函数
function LoadTreePlugin()
	luanet.load_assembly("CustomLoadTree.dll")
	local cls = luanet.import_type("CustomLoadTree.Class1")
	local o = cls()
	local treeview = o:LoadTreePlugin("tbl_quests", "_Cat", Conn)
	return treeview
end


--把整个模块界面对话框化的例子
	ShowModelInDialog("技能编辑器"); -- 此函数已注册。


--动态定制属性显示值，不影响保存内容
function refreshDisplay(prop)
	if (prop.Name == 'affectvalue1') then
		prop.DisplayValue = string.format('名称[%d]', prop.Value)	
	end
end
function onaftervaluechanged(prop, e)
	refreshDisplay(prop)
	return true
end
function onselectrecordchanged(properties, selecttabindex)
	refreshDisplay(properties['affectvalue1'])
end

-------------------------------------------------------------
--用于自定义树结点的显示内容
--调用时机：每次树结点显示出来时，会调用此函数，当此函数返回非空值时，会把这个值作为树结点的显示
function ongettreevalue(prop, e)
	e.Parent
	e.Child
end

-------------------------------------------------------------
-- 可以在这个函数里对新建主表记录进行自定义操作，例如管理ID
-- 参数：  SelectedNode 表示当前选中哪个结点
           AddingLevel  表示想在哪一层新建（第一层 0，第二层 1，etc.）
-- 返回值：新建出的结点。
function AddNode(SelectedNode, AddingLevel)
	local keys = {}
	keys[0] = 1 -- getUnusedID1
	keys[1] = 2 -- getUnusedID2
	SqlInsertRecord("Book", keys)
	local nodeRet = AddTreeNodes(SelectedNode.Nodes, "新建", ObjToObjArr2(keys[0], keys[1]))
	return nodeRet
end

--------------------------------------------------------------
--树事件：可以定制显示树结点的内容，这个速度较快，不会在每个结点显示时调用
--DisplayTreeNode
--注意：不能够定制VALUE的显示方式，只能作组合
function DisplayTreeNode()
	return "<value>" .. 'aaa'
end

--树事件：可以定制显示树结点的内容，这个函数速度较慢，每个结点显示时会调用一次
--DisplayTreeNode
--注意：这个函数会导致树的显示速度有点慢，但只在启动模块时慢点，其他时候正常
function  DisplayTreeNodePlus()
	if (DisplayField ~= nil) then
		local s = string.gsub(DisplayField, '<.->', '');
		if (DisplayRow ~= nil) then
			--trace('aaaa')
			--trace(DisplayRow['eventid'])
			s = string.format('(%d).%s', DisplayRow['eventid'], s);
		end
		return s
	else
		return "eventname"
	end
end

--------------------------------------------------------------
--返回排序字段，注意：只在无分类字段的情况下可有，格式为 aaa,bbb 不能错，不然模块树无法载入
function OnGetSortField()
	return 'eventid'
end

--------------------------------------------------------------
combo取KEY，实际存入字段的值的方法
prop.ComboValues[prop.Value]

--------------------------------------------------------------
Form:RefreshProperty() 这个可以刷新所有的属性

--增加事件
onafterdelrecord

--增加事件
neednewrecord
返回true表示后面可以进入新建记录的过程,否则不能