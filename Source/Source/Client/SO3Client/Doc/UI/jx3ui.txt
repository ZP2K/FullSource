可能需要做的功能：
	界面精灵；
	事件触发脚本；
	窗口外拖；
	画中画；
	
	
Event部分分析
	脚本部分主要有两大块：
		1、界面底层控件属性值的存取；
		2、由窗口消息产生的事件；
	工作量主要集中在第一部分。按照目前剑二的界面底层，要让这两部分有机结合起来，
	需要做以下修改：
		1、缺属性值接口的类需要补上存取函数；
		2、目前界面底层窗口消息传递的路径有两条：
			1、直接使用窗口实体的指针；
			2、由窗口树最顶层先处理，在没被处理的情况下，以树遍历（应该是后序）的方式传递；
			而以目前的情况看，界面底层基本上使用的是第一种方式，第二种方式在处理窗口消息后的返回值需要更多的考虑，
			而且在如果在树变动的情况下有可能出现消息传递不到的问题。
			而第一种方式，直接限制了脚本系统的整合。因为使用的是实体指针，在游戏运行前，无法确知某个控件的指针，
			因此就算有脚本封装，也是无法与触发事件以外控件联系。由于这个原因，也是剑二上层界面都使用static实例的根本原因。
			由于这个原因，这里就有两种方案：
				1、对剑二界面系统做少量修改，保留static实例的做法，对每个具体窗口，写具体脚本；
				2、对剑二界面底层做更多修改，不使用指针关联的方式；
			我个人倾向于第二种方案。剑二界面，超过100个，如果对具体窗口写脚本，实际上，不能体现脚本的灵活性；而且不能完整
			接触到任意控件。至于方案二，引出了令外一个问题：用何种方式关联控件。
			这里提供两种方案：
				1、每个控件，由配置文件指定一个唯一ID；
				2、每个控件设定一个名字，使用目录结构的方式；
				3、结合两种方式；
			三种方式各有优缺点:
				方案一，有利于外部相关资源的整理，如，帮助提示，可以很简单的单独放在excel表里面；缺点是ID的唯一性不好保证，
				也不便于记忆，如果界面部分以后有策划整合，可能需要一张控件名字，用途，ID的表，以便查阅；
				方案二，优点是便于记忆查找控件；缺点是写脚本的时候，需要输入很长的名字，而且在程序里面需要占用更多的内存；
				方案三，优点是可以优点互补，但有复杂化的倾向，弄不好，脚本可能两者混用，增加出错的可能性；
				
	参考了几种带脚本的界面系统，结合剑二的界面系统，比较灵活的做法是：
		从KWndButton分离出一层，光是事件接收的，并对这层做接口；消息系统发送的消息，还是先由WndProc()处理，
		在WndProc()里面调用OnEvent()，并生成OnXXXX的脚本调用；
		如:
		IEventable
		{
		public:
			virtual LRESULT	OnEvent(UINT uMsg, WPARAM wParam, LPARAM lParam) = 0;
		};
		OnEvent()替代原来的WndProc()，机制跟WndProc一样，都是由派生类先调，如果需要再让父类调用。OnEvent()，
		在OnEvent()里面可以调用跟配置文件绑定的脚本；
		这些都是应该是比较好理解的。难点是在于目前的WndProc()混合了很多常务性的操作，如果假如脚本系统，
		这部分需要进一步整理；分出那些是不能让脚本操作，那些是可以的，那些是让脚本先调用，那些后调用；
				
		如果全部脚本化，这部分可以简单些，或者说灵活些。全部脚本化的意思是WndProc里面的常务性操作都由默认脚本进行，
		默认脚本的做法有两种:
			1、使用lua的继承特性；
			2、把硬编码部分用lua实现；
		两种方式都对剑二界面系统由根本性改变；

		除了全部脚本化，另外的做法是，让OnEvent先调用，在必要的时候让WndProc()调用，这需要把WndProc()的一部分框架性的
		代码移到IEventable去，如:
		IEventable
		{
		public:
			LRESULT FireEvent(UINT uMsg, WPARAM wParam, LPARAM lParam);
			virtual LRESULT	OnEvent(UINT uMsg, WPARAM wParam, LPARAM lParam) = 0;
			virtual LRESULT	WndProc(UINT uMsg, WPARAM wParam, LPARAM lParam) = 0;
		};
		由FireEvent()先执行，让其来协调OnEvent()以及WndProc()；
		
		脚本这块的做法挺多，如果不想对剑二界面底层逻辑做太大改动，可以在降低灵活性的前提下加入事件脚本。具体做法是：
		WndProc()这块基本不动，只提供某些事件的响应，如LButtonDown之类的，事件脚本不提供返回值，不允许改变界面底层架构性的，
		常务性的属性；譬如LButtonUp -> OnEventLButtonUp() -> lua function OnLButtonUp() -> lua脚本里面改变了当前点击按钮的
		状态，如为disable，而当lua脚本处理完后，回到host里面，让LButtonUp继续处理以下的操作，disable状态有可能被去掉；如何
		避免这些隐晦的问题，是需要再做考虑的地方。
		
		

配置部分分析
		配置部分分两部分：
		1、控件位置大小信息；
				这部分值在控件被创建的时候设置，在
		2、控件其他属性信息；
				这部分信息可以使用默认值；
				默认值配置统一管理；
				


资源管理部分分析：
	剑二界面的图片资源是由绘制引擎部分管理的，
	剑三改为由控件自己管理，由这引起的改动主要有：
		1、KWndImage，因为其他用到图片的控件都派生于 KWndImage ；
		2、KWndPicFrameShadow，这个类除了图片资源管理外，实际上需要做更大的改动；
		3、KWndEffect，最近新增加的类，用于特效的播放，还没合并到剑三；
	剑二使用的是spr格式的文件，此格式为打包，里面有帧的概念，类似gif；
	

		
建议作修改：
		把剑二系统的Copy改为拷贝构造函数，便于跟STL一起使用；
		剑二系统图片响应区域只能向右、向下扩展；
		剑二拖动有延迟；
		
		
		
不确定的问题：
	是否需要小图片拼大图片；
	
	

建议修改步骤：	
	1、把剑二系统移到剑三，让其能编译；							大部分已完成，剩余部分不确定
	2、去掉一些不兼容的东西，如某些强制类型转换；		已完成
	3、把界面系统放到命名空间里面；									已完成
	4、把剑二的界面编辑器插件移到剑三；							3-5天
	5、提供给游戏世界的回调接口；										1-2天
	6、去掉指针关联的方式；													1-3天
	7、加上欠缺的属性存取操作；											1-2天
	8、提取默认属性配置；														3-5天
	9、提取默认事件处理；														1-2天
	10、整理需要的事件类型；												1-2天
	11、配置文件加上事件相关的配置项；							1-2天
	12、看看脚本系统需不需要做调整；								不确定
	13、加上事件调脚本；														1-5天
	14、修改界面编辑器；														不确定
	15、修改peeper，让其支持导出、转换成剑三格式		不确定
	
	
需要修改peeper，增加拼图的功能，以及定义拼图的格式；

	
准备废弃的：
WND_N_CHILD_MOVE


物件拖放相关：

  渲染引擎提供的接口（建议）：
  DrawObject最好能在g_cGraphicsTool里面提供，或者把UI需要用到的接口独立出来，这两个函数跟拖放无关，但UI需要。
  void DrawObject(DWORD dwObjectID, D3DXVECTOR2 const& v2Position, float fScale);
  D3DXVECTOR2 GetObjectSize(DWORD dwObjectID);
  
	游戏世界提供的接口（建议）；
	nRoom 除了正常的Room，需要提供另外两个Room：Null以及Ground，Null用于清空手里的东西，Ground用于丢东西。
	
	BOOL 	ExchangeObjectBetweenRoom(int nDstRoom, int nSrcRoom, int nDstIndex, int nSrcIndex);
	SIZE	GetRoomSize(int nRoom);
	int 	GetRoomCellCount(int nRoom);
	DWORD GetObjectFromRoom(int nRoom, int nIndex);
		
			
	UI提供的接口：
	BeginDrag(KWndWindow* pWndFrom, POINT ptFrom, RECT rcConstrain);
	EndDrag(KWndWindow* pWndTo, POINT ptTo);

	
	处理过程简述：
		拖放过程由UI开始，如鼠标左键点击道具栏，由UI把坐标转换为游戏世界里面某个room的某个格子的index。
		界面道具栏的room index是定义好的，为了方便使用，UI提供的lua脚本会使用英文标识每个room，
		由UI映射到相应的room index。然后调用ExchangeObjectBetweenRoom()，把道具栏里面的物品交换到手上，
		完成拾取物品的操作。渲染引擎根据手上有没有物品，来渲染手上的物品，但这样做可能引起鼠标指针跟拖动物品不同步。
		放下物品的操作也差不多。
		
		
		
		