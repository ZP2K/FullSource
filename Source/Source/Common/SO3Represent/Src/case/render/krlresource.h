#ifndef CASE_RENDER_K_RL_RESOURCE_H
#define CASE_RENDER_K_RL_RESOURCE_H

#include "SO3Represent/SO3RepresentInterface.h"

// Skill
enum
{
	SKILL_BUFF_PART_TOP,
	SKILL_BUFF_PART_MIDDLE,
	SKILL_BUFF_PART_BOTTOM,

	SKILL_BUFF_PART_COUNT,
};

// Missile

enum
{
    MISSILE_PHASE_SFX_TYPE_MODEL,
    MISSILE_PHASE_SFX_TYPE_SFX,

    MISSILE_PHASE_SFX_TYPE_COUNT,
};

enum
{
    MISSILE_PHASE_SFX_COUNT = 8,
    MISSILE_FIXED_TRACK_FRAME_COUNT = 25,
};

// Equip SFX Sequence

enum { EQUIP_SFX_SEQUENCE_COUNT = 4 };

// Base Missile Parameter
enum
{
    MOVEMENT_TYPE_STRAIGHT,
    MOVEMENT_TYPE_PARABOLA,
    MOVEMENT_TYPE_RANDOM,

    MOVEMENT_TYPE_END,
};

enum
{
    CASTER_TYPE_LAST_MISSILE_PHASE,
    CASTER_TYPE_CASTER,
    CASTER_TYPE_TARGET,

    CASTER_TYPE_END,
};

enum
{
    SYMMETRICAL_TYPE_ODD,
    SYMMETRICAL_TYPE_EVEN,

    SYMMETRICAL_TYPE_END,
};

enum
{
    REFERENCE_TYPE_AXIS,
    REFERENCE_TYPE_CENTRIC,

    REFERENCE_TYPE_END,
};

enum
{
    Z_LOCK_TYPE_TERRAIN,
    Z_LOCK_TYPE_FREE,

    Z_LOCK_TYPE_END,
};

enum
{
    MISSILE_DIRECTION_HORIZONTAL,
    MISSILE_DIRECTION_VERTICAL,

    MISSILE_DIRECTION_END,
};

enum RL_MISSILE_PHASE_TYPE
{
    RL_MISSILE_PHASE_TYPE_NONE,
    RL_MISSILE_PHASE_TYPE_LINE,
    RL_MISSILE_PHASE_TYPE_CIRCLE,
    RL_MISSILE_PHASE_TYPE_FIXED_TRACK,
    RL_MISSILE_PHASE_TYPE_LIGHTNING,

    RL_MISSILE_PHASE_TYPE_COUNT,
};

enum RL_MISSILE_PARAM_TYPE
{
    RL_MISSILE_PARAM_TYPE_MODEL,
    RL_MISSILE_PARAM_TYPE_HOMING,
    RL_MISSILE_PARAM_TYPE_TIMELINE,
    RL_MISSILE_PARAM_TYPE_Y_AXIS,

    RL_MISSILE_PARAM_TYPE_COUNT,
};

// Doodad

enum
{
    DOODAD_SFX_MAIN,
    DOODAD_SFX_LOOT_LIST,
    DOODAD_SFX_QUEST,

    DOODAD_SFX_COUNT,
};

// Rides

enum
{
    RIDES_ANI_NONE,
    RIDES_ANI_STAND,
    RIDES_ANI_JUMP,
    RIDES_ANI_WALK_FORWARD,
    RIDES_ANI_WALK_BACKWARD,
    RIDES_ANI_RUN_FORWARD,
    RIDES_ANI_RUN_BACKWARD,
    RIDES_ANI_TURN_LEFT,
    RIDES_ANI_TURN_RIGHT,
    RIDES_ANI_BRAY,    //×øÆï³¤Ð¥

    RIDES_ANI_COUNT,
};

enum
{
    RIDES_SFX_MAIN,

    RIDES_SFX_SKILL_BUFF_TOP_LH,
    RIDES_SFX_SKILL_BUFF_TOP_RH,
    RIDES_SFX_SKILL_BUFF_MIDDLE_LH,
    RIDES_SFX_SKILL_BUFF_MIDDLE_RH,
    RIDES_SFX_SKILL_BUFF_BOTTOM_LH,
    RIDES_SFX_SKILL_BUFF_BOTTOM_RH,

    RIDES_SFX_COUNT,
};

// Character

//ANIMATION
enum RL_ANIMATION_TABLE
{
    RL_ANIMATION_TABLE_NONE,

    RL_ANIMATION_TABLE_SLIP_FORWARD,
    RL_ANIMATION_TABLE_SLIP_BACKWARD,
    RL_ANIMATION_TABLE_SLIP_LEFT,
    RL_ANIMATION_TABLE_SLIP_RIGHT,

    RL_ANIMATION_TABLE_SIT_UP,
    RL_ANIMATION_TABLE_SIT_DOWN,
    RL_ANIMATION_TABLE_DEATH,
    RL_ANIMATION_TABLE_RISE,
    RL_ANIMATION_TABLE_KNOCK_DOWN,
    RL_ANIMATION_TABLE_KNOCK_DOWN_IDLE,
    RL_ANIMATION_TABLE_KNOCK_DOWN_BE_HIT,
    RL_ANIMATION_TABLE_KNOCK_BACK,
    RL_ANIMATION_TABLE_KNOCK_OFF,
    RL_ANIMATION_TABLE_HALT,
    RL_ANIMATION_TABLE_FREEZE,
    RL_ANIMATION_TABLE_ENTRAP,
    RL_ANIMATION_TABLE_PULL,

    RL_ANIMATION_TABLE_DASH_FORWARD,
    RL_ANIMATION_TABLE_DASH_BACKWARD,
    RL_ANIMATION_TABLE_DASH_LEFT,
    RL_ANIMATION_TABLE_DASH_RIGHT,

    RL_ANIMATION_TABLE_DASH_FORWARD_IDLE,
    RL_ANIMATION_TABLE_DASH_BACKWARD_IDLE,
    RL_ANIMATION_TABLE_DASH_LEFT_IDLE,
    RL_ANIMATION_TABLE_DASH_RIGHT_IDLE,
    
    RL_ANIMATION_TABLE_REPULSED_FORWARD,
    RL_ANIMATION_TABLE_REPULSED_BACKWARD,
    RL_ANIMATION_TABLE_REPULSED_LEFT,
    RL_ANIMATION_TABLE_REPULSED_RIGHT,

    RL_ANIMATION_TABLE_SKID_FORWARD,
    RL_ANIMATION_TABLE_SKID_BACKWARD,
    RL_ANIMATION_TABLE_SKID_LEFT,
    RL_ANIMATION_TABLE_SKID_RIGHT,

    RL_ANIMATION_TABLE_TURN_LEFT,
    RL_ANIMATION_TABLE_TURN_RIGHT,

    // ÌøÔ¾
    RL_ANIMATION_TABLE_BEGIN_JUMP,
    RL_ANIMATION_TABLE_JUMPING,
    RL_ANIMATION_TABLE_END_JUMP_IDLE,
    RL_ANIMATION_TABLE_BEGIN_DOUBLE_JUMP,
    RL_ANIMATION_TABLE_DOUBLE_JUMPING,
    RL_ANIMATION_TABLE_END_DOUBLE_JUMP_IDLE,

    // ÓÎÓ¾ÖÐÌøÔ¾
    RL_ANIMATION_TABLE_BEGIN_SWIM_JUMP,
    RL_ANIMATION_TABLE_SWIM_JUMPING,
    RL_ANIMATION_TABLE_END_SWIM_JUMP_IDLE,
    RL_ANIMATION_TABLE_BEGIN_SWIM_DOUBLE_JUMP,
    RL_ANIMATION_TABLE_SWIM_DOUBLE_JUMPING,
    RL_ANIMATION_TABLE_END_SWIM_DOUBLE_JUMP_IDLE,

    // ²å°ÎÎäÆ÷
    RL_ANIMATION_TABLE_BEGIN_SHEATH_BACK,
    RL_ANIMATION_TABLE_BEGIN_SHEATH_SIDE,
    RL_ANIMATION_TABLE_BEGIN_UNSHEATH_BACK,
    RL_ANIMATION_TABLE_BEGIN_UNSHEATH_SIDE,
    RL_ANIMATION_TABLE_END_SHEATH_BACK,
    RL_ANIMATION_TABLE_END_SHEATH_SIDE,
    RL_ANIMATION_TABLE_END_UNSHEATH_BACK,
    RL_ANIMATION_TABLE_END_UNSHEATH_SIDE,

    // ´ý»ú
    RL_ANIMATION_TABLE_IDLE,
    RL_ANIMATION_TABLE_UNSHEATH_IDLE,
    RL_ANIMATION_TABLE_FIGHT_IDLE,

    // ÒÆ¶¯
    RL_ANIMATION_TABLE_SWIM_STAND,
    RL_ANIMATION_TABLE_SWIM_FORWARD,
    RL_ANIMATION_TABLE_SWIM_BACKWARD,
    RL_ANIMATION_TABLE_SWIM_LEFT,
    RL_ANIMATION_TABLE_SWIM_RIGHT,
    RL_ANIMATION_TABLE_WALK_FORWARD,
    RL_ANIMATION_TABLE_WALK_BACKWARD,
    RL_ANIMATION_TABLE_WALK_FIGHT_FORWARD,
    RL_ANIMATION_TABLE_WALK_FIGHT_BACKWARD,
    RL_ANIMATION_TABLE_RUN_FORWARD,
    RL_ANIMATION_TABLE_RUN_BACKWARD,
    RL_ANIMATION_TABLE_RUN_FIGHT_FORWARD,
    RL_ANIMATION_TABLE_RUN_FIGHT_BACKWARD,

    // ±»»÷
    RL_ANIMATION_TABLE_PHYSICS_BLOCK,
    RL_ANIMATION_TABLE_SOLAR_MAGIC_BLOCK,
    RL_ANIMATION_TABLE_NEUTRAL_MAGIC_BLOCK,
    RL_ANIMATION_TABLE_LUNAR_MAGIC_BLOCK,
    RL_ANIMATION_TABLE_POISON_BLOCK,
    RL_ANIMATION_TABLE_BE_HIT,
    RL_ANIMATION_TABLE_DODGE,
    RL_ANIMATION_TABLE_PARRY,
    RL_ANIMATION_TABLE_CRITICAL_STRIKE,
    RL_ANIMATION_TABLE_PHYSICS_DAMAGE,
    RL_ANIMATION_TABLE_SOLAR_MAGIC_DAMAGE,
    RL_ANIMATION_TABLE_NEUTRAL_MAGIC_DAMAGE,
    RL_ANIMATION_TABLE_LUNAR_MAGIC_DAMAGE,
    RL_ANIMATION_TABLE_POISON_DAMAGE,
    RL_ANIMATION_TABLE_REFLECT_DAMAGE,
    RL_ANIMATION_TABLE_HEAL,
    RL_ANIMATION_TABLE_STEAL_LIFE,
    RL_ANIMATION_TABLE_ABSORB_DAMAGE,
    RL_ANIMATION_TABLE_SHIELD_DAMAGE,    

    RL_ANIMATION_TABLE_COUNT,
};

enum RL_NPC_ANIMATION_TABLE
{
    RL_NPC_ANIMATION_TABLE_NONE,

    RL_NPC_ANIMATION_TABLE_IDLE,

    RL_NPC_ANIMATION_TABLE_SIT_DOWN,
    RL_NPC_ANIMATION_TABLE_SIT_UP,
    RL_NPC_ANIMATION_TABLE_DEATH,
    RL_NPC_ANIMATION_TABLE_RISE,
    RL_NPC_ANIMATION_TABLE_KNOCK_DOWN,
    RL_NPC_ANIMATION_TABLE_KNOCK_DOWN_IDLE,
    RL_NPC_ANIMATION_TABLE_KNOCK_DOWN_BE_HIT,
    RL_NPC_ANIMATION_TABLE_KNOCK_BACK,
    RL_NPC_ANIMATION_TABLE_KNOCK_OFF,
    RL_NPC_ANIMATION_TABLE_HALT,
    RL_NPC_ANIMATION_TABLE_FREEZE,
    RL_NPC_ANIMATION_TABLE_ENTRAP,
    RL_NPC_ANIMATION_TABLE_PULL,
    RL_NPC_ANIMATION_TABLE_DASH_FORWARD,
    RL_NPC_ANIMATION_TABLE_DASH_BACKWARD,
    RL_NPC_ANIMATION_TABLE_DASH_LEFT,
    RL_NPC_ANIMATION_TABLE_DASH_RIGHT,
    RL_NPC_ANIMATION_TABLE_DASH_FORWARD_IDLE,
    RL_NPC_ANIMATION_TABLE_DASH_BACKWARD_IDLE,
    RL_NPC_ANIMATION_TABLE_DASH_LEFT_IDLE,
    RL_NPC_ANIMATION_TABLE_DASH_RIGHT_IDLE,
    RL_NPC_ANIMATION_TABLE_REPULSED_FORWARD,
    RL_NPC_ANIMATION_TABLE_REPULSED_BACKWARD,
    RL_NPC_ANIMATION_TABLE_REPULSED_LEFT,
    RL_NPC_ANIMATION_TABLE_REPULSED_RIGHT,
    RL_NPC_ANIMATION_TABLE_SKID_FORWARD,
    RL_NPC_ANIMATION_TABLE_SKID_BACKWARD,
    RL_NPC_ANIMATION_TABLE_SKID_LEFT,
    RL_NPC_ANIMATION_TABLE_SKID_RIGHT,
    RL_NPC_ANIMATION_TABLE_TURN_LEFT,
    RL_NPC_ANIMATION_TABLE_TURN_RIGHT,
    RL_NPC_ANIMATION_TABLE_BEGIN_JUMP,
    RL_NPC_ANIMATION_TABLE_JUMPING,
    RL_NPC_ANIMATION_TABLE_END_JUMP_IDLE,
    RL_NPC_ANIMATION_TABLE_BEGIN_DOUBLE_JUMP,
    RL_NPC_ANIMATION_TABLE_DOUBLE_JUMPING,
    RL_NPC_ANIMATION_TABLE_END_DOUBLE_JUMP_IDLE,
    RL_NPC_ANIMATION_TABLE_FIGHT_IDLE,
    RL_NPC_ANIMATION_TABLE_SWIM_STAND,
    RL_NPC_ANIMATION_TABLE_SWIM_FORWARD,
    RL_NPC_ANIMATION_TABLE_SWIM_BACKWARD,
    RL_NPC_ANIMATION_TABLE_SWIM_LEFT,
    RL_NPC_ANIMATION_TABLE_SWIM_RIGHT,
    RL_NPC_ANIMATION_TABLE_WALK_FORWARD,
    RL_NPC_ANIMATION_TABLE_WALK_BACKWARD,
    RL_NPC_ANIMATION_TABLE_RUN_FORWARD,
    RL_NPC_ANIMATION_TABLE_RUN_BACKWARD,
    RL_NPC_ANIMATION_TABLE_BE_HIT,
    RL_NPC_ANIMATION_TABLE_SKILL_DODGE,
    RL_NPC_ANIMATION_TABLE_SKILL_PARRY,

    RL_NPC_ANIMATION_TABLE_COUNT,
};

enum RL_WEAPON
{
    RL_WEAPON_NONE,
    RL_WEAPON_WAND,
    RL_WEAPON_SPEAR,
    RL_WEAPON_SWORD,
    RL_WEAPON_FIST,
    RL_WEAPON_DOUBLE_WEAPON,
    RL_WEAPON_PEN,
    RL_WEAPON_DART,

    RL_WEAPON_COUNT,
};

enum RL_SHEATH
{
    RL_SHEATH_NONE,
    RL_SHEATH_WAND_BACK,
    RL_SHEATH_WAND_SIDE,
    RL_SHEATH_SPEAR_BACK,
    RL_SHEATH_SPEAR_SIDE,
    RL_SHEATH_SWORD_BACK,
    RL_SHEATH_SWORD_SIDE,
    RL_SHEATH_FIST_BACK,
    RL_SHEATH_FIST_SIDE,
    RL_SHEATH_DOUBLE_WEAPON_BACK,
    RL_SHEATH_DOUBLE_WEAPON_SIDE,
    RL_SHEATH_PEN_BACK,
    RL_SHEATH_PEN_SIDE,
    RL_SHEATH_DART_BACK,
    RL_SHEATH_DART_SIDE,

    RL_SHEATH_COUNT,
};

enum RL_SCHOOL
{
    RL_SCHOOL_JH,
    RL_SCHOOL_TC,
    RL_SCHOOL_WH,
    RL_SCHOOL_CY,
    RL_SCHOOL_QX,
    RL_SCHOOL_SL,
    RL_SCHOOL_CJ,
    RL_SCHOOL_GB,
    RL_SCHOOL_MJ,
    RL_SCHOOL_WD,
    RL_SCHOOL_TM,

    RL_SCHOOL_COUNT,
};

// EQUIP FILE
enum
{
    CHARACTER_EQUIP_FILE_MELEE_WEAPON,
    CHARACTER_EQUIP_FILE_CHEST,
    CHARACTER_EQUIP_FILE_HAIR,
    CHARACTER_EQUIP_FILE_WAIST,
    CHARACTER_EQUIP_FILE_PANTS,
    CHARACTER_EQUIP_FILE_BANGLE,
    CHARACTER_EQUIP_FILE_BACK_EXTEND,
    CHARACTER_EQUIP_FILE_WAIST_EXTEND,
    CHARACTER_EQUIP_FILE_FACE,
    CHARACTER_EQUIP_FILE_HAT,

    CHARACTER_EQUIP_FILE_COUNT,
};

// SFX FILE
enum
{
    CHARACTER_EQUIP_SFX_FILE_RL_WEAPON_METEOR,
    CHARACTER_EQUIP_SFX_FILE_RL_WEAPON_FRINGE,
    CHARACTER_EQUIP_SFX_FILE_CHEST,
    CHARACTER_EQUIP_SFX_FILE_HAIR,
    CHARACTER_EQUIP_SFX_FILE_WAIST,
    CHARACTER_EQUIP_SFX_FILE_PANTS,
    CHARACTER_EQUIP_SFX_FILE_BANGLE,
    CHARACTER_EQUIP_SFX_FILE_BACK_EXTEND,
    CHARACTER_EQUIP_SFX_FILE_WAIST_EXTEND,
    CHARACTER_EQUIP_SFX_FILE_FACE,
    CHARACTER_EQUIP_SFX_FILE_HAT,

    CHARACTER_EQUIP_SFX_FILE_COUNT,
};

//SFX
enum
{
    CHARACTER_SFX_PARIMARY,
    CHARACTER_SFX_SECONDARY,
    CHARACTER_SFX_SKILL_BUFF_TOP_LH,
    CHARACTER_SFX_SKILL_BUFF_TOP_RH,
    CHARACTER_SFX_SKILL_BUFF_MIDDLE_LH,
    CHARACTER_SFX_SKILL_BUFF_MIDDLE_RH,
    CHARACTER_SFX_SKILL_BUFF_BOTTOM_LH,
    CHARACTER_SFX_SKILL_BUFF_BOTTOM_RH,
    CHARACTER_SFX_SKILL_EFFECT_0,
    CHARACTER_SFX_SKILL_EFFECT_1,
    CHARACTER_SFX_SKILL_EFFECT_2,
    CHARACTER_SFX_SKILL_EFFECT_3,
    CHARACTER_SFX_LIFE,
    CHARACTER_SFX_TONG,
    CHARACTER_SFX_TITLE,
    CHARACTER_SFX_NAME,
    CHARACTER_SFX_TITLE_MARK,
    
    CHARACTER_SFX_COUNT,

    CHARACTER_SEQUENCE_SFX_BEGIN = CHARACTER_SFX_COUNT,
    CHARACTER_SEQUENCE_SFX_COUNT = 64,

    CHARACTER_SFX_TOTAL_COUNT = CHARACTER_SFX_COUNT + CHARACTER_SEQUENCE_SFX_COUNT,
};

enum
{
    CHARACTER_EQUIP_COUNT = MODEL_PLAYER_EQUIP_COUNT,

    CHARACTER_SOCKET_COUNT 
    = RL_NPC_SOCKET_COUNT > MODEL_PLAYER_SOCKET_COUNT + MODEL_PLAYER_SOCKET_ADD_ONE_COUNT 
    ? RL_NPC_SOCKET_COUNT : MODEL_PLAYER_SOCKET_COUNT + MODEL_PLAYER_SOCKET_ADD_ONE_COUNT,
};

enum
{
    CHARACTER_SFX_BBOX_BALLOON_BEGIN = CHARACTER_SFX_LIFE,
    CHARACTER_SFX_BBOX_BALLOON_END   = CHARACTER_SFX_NAME + 1,

    CHARACTER_SFX_BBOX_BEGIN         = CHARACTER_SFX_LIFE,
    CHARACTER_SFX_BBOX_END           = CHARACTER_SFX_TITLE_MARK + 1,

    CHARACTER_SFX_SKILL_EFFECT_BEGIN = CHARACTER_SFX_SKILL_EFFECT_0,
    CHARACTER_SFX_SKILL_EFFECT_END   = CHARACTER_SFX_SKILL_EFFECT_3 + 1,

    CHARACTER_SFX_SKILL_EFFECT_COUNT = CHARACTER_SFX_SKILL_EFFECT_END - CHARACTER_SFX_SKILL_EFFECT_BEGIN,

    RL_NPC_NORMAL_ANIMATION_COUNT = 1,
    RL_NPC_IDLE_ANIMATION_COUNT = 6,
};

// Common
enum KRL_CHARACTER_TYPE
{
    CHARACTER_TYPE_BEGIN = 0,

    CHARACTER_TYPE_LOCAL_PLAYER = CHARACTER_TYPE_BEGIN,
    CHARACTER_TYPE_REMOTE_PLAYER,
    CHARACTER_TYPE_NPC,

    CHARACTER_TYPE_END,
};

enum 
{ 
    DOODAD_MODEL_COUNT = MODEL_DOODAD_EQUIP_AND_SOCKET_COUNT,
    NPC_MODEL_COUNT    = RL_NPC_SOCKET_COUNT,
    PLAYER_MODEL_COUNT = MODEL_PLAYER_EQUIP_AND_SOCKET_COUNT,

    SCENE_OBJECT_MODEL_MAX_COUNT 
    =  DOODAD_MODEL_COUNT > NPC_MODEL_COUNT 
    ? (DOODAD_MODEL_COUNT > PLAYER_MODEL_COUNT ? DOODAD_MODEL_COUNT : PLAYER_MODEL_COUNT) 
    : (PLAYER_MODEL_COUNT > NPC_MODEL_COUNT ? PLAYER_MODEL_COUNT : NPC_MODEL_COUNT),
};

enum { RL_SOCKET_NAME_LENGTH = 16 };
enum { RL_FILE_PATH_LENGTH = 128 };

#endif // CASE_RENDER_K_RL_RESOURCE_H