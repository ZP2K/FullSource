#ifndef FILE_K_FILE_PATH_H
#define FILE_K_FILE_PATH_H

#include "../../common/tstring.h"

class KFilePath
{
public:
	enum
	{
		FILE_PATH_BEGIN,

        // Common
        FILE_PATH_COMMON_NUMBER = FILE_PATH_BEGIN,
        FILE_PATH_COMMON_GLOBALL_EFFECT,
        FILE_PATH_COMMON_SOUND_TABLE,
        FILE_PATH_COMMON_FORCE_RELATION_TABLE,
        FILE_PATH_COMMON_OPTIMIZATION_TABLE,
        FILE_PATH_COMMON_CURSOR_EFFECT,

        // Player
        FILE_PATH_PLAYER_DIRECTORY,
        FILE_PATH_PLAYER_EQUIP_DIRECTORY,
        FILE_PATH_PLAYER_EQUIP_SFX_DIRECTORY,
        FILE_PATH_PLAYER_EQUIP_MODEL,
		FILE_PATH_PLAYER_ANIMATION_MODEL,
        FILE_PATH_PLAYER_TABLE,
        FILE_PATH_PLAYER_ANIMATION_RELATION_UP_TABLE,
        FILE_PATH_PLAYER_ANIMATION_RELATION_DOWN_TABLE,
        FILE_PATH_PLAYER_BUFF_ANIMATION_ADJUST_TABLE,
        FILE_PATH_PLAYER_SERIAL_ANIMATION_TABLE,
        FILE_PATH_PLAYER_CRAFT_ANIMATION_TABLE,
        FILE_PATH_PLAYER_UNIFORM_TABLE,
        FILE_PATH_PLAYER_ROLETYPE_UNIFORM_TABLE,
        FILE_PATH_PLAYER_FORCE_UNIFORM_TABLE,

        // Npc
        FILE_PATH_NPC_MODEL,
        FILE_PATH_NPC_ANIMATION_MODEL,
        FILE_PATH_NPC_ANIMATION_ADJUST_TABLE,
        FILE_PATH_NPC_ANIMATION_FUSION_TABLE,
        FILE_PATH_NPC_SERIAL_ANIMATION_TABLE,
        FILE_PATH_NPC_ANIMATION_RELATION_TABLE,
        FILE_PATH_NPC_UNIFORM_MODEL,

        // Rides
        FILE_PATH_RIDES_DIRECTORY,
        FILE_PATH_RIDES_MODEL,
        FILE_PATH_RIDES_EQUIP_MODEL,
        FILE_PATH_RIDES_ANIMATION_MODEL,
        FILE_PATH_RIDES_ANIMATION_FUSION,
        FILE_PATH_RIDES_FOR_ROAD,

        // Doodad
        FILE_PATH_DOODAD_MODEL,
        FILE_PATH_DOODAD_UNIFORM_MODEL,
        FILE_PATH_DOODAD_EFFECT_MODEL,

        // Skill
        FILE_PATH_SKILL_DIRECTORY,
        FILE_PATH_SKILL_BUFF_MODEL,
        FILE_PATH_SKILL_CHAIN_MODEL,
        FILE_PATH_SKILL_CASTER_MODEL,
        FILE_PATH_SKILL_EFFECT_MODEL,
        FILE_PATH_SKILL_RESULT_TABLE,
        FILE_PATH_SKILL_MISSILE_TABLE,

        // Missile
        FILE_PATH_MISSILE_DIRECTORY,
		FILE_PATH_MISSILE_PHASE_MODEL,
        FILE_PATH_MISSILE_FIXED_TRACK_FRAME_TABLE,

        // Equip sfx sequence
        FILE_PATH_PLAYER_EQUIP_SFX_SEQUENCE_INDEX,
        FILE_PATH_PLAYER_EQUIP_SFX_MODEL_PARAM,

		FILE_PATH_END,
	};

private:
	enum { FILE_PATH_LEN = 128 };

	typedef std::map<_tstring, int>	KCountedStringMap;

public:
	KFilePath();
	~KFilePath();

    BOOL Init();
    void Exit();
    BOOL Reset();

	LPCTSTR GetFilePath(int nIndex) const;
	LPCTSTR GetFilePath(int nIndex, LPCTSTR szFileName) const;
	LPCTSTR GetFilePath(int nIndex, LPCTSTR szFileName, LPCTSTR szFileExt, BOOL bExtHasDot = FALSE, BOOL bHasSep = FALSE) const;

	static BOOL	MissFile(LPCTSTR szFilePath);
	static BOOL	TabError(LPCTSTR szFmt, ...);

private:
	BOOL LoadFilePath();

private:
	TCHAR m_aszFilePath[FILE_PATH_END][FILE_PATH_LEN];

	mutable TCHAR m_szFilePath[MAX_PATH];

	KCountedStringMap m_aMissFilePath;
	KCountedStringMap m_aTabError;
};

#endif // FILE_K_FILE_PATH_H